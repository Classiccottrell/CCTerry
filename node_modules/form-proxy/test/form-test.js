/*jslint node: true */
/*global describe, it */
"use strict";

var assert = require('assert');
var rewire = require('rewire');
var form = rewire('../lib/form');

describe('Form', function() {

	var data =  { 'form': {}, rules: {} };
	var config = { url: 'someurl.com'};

	it('should forward call to the proxy when validation succeeds', function(done) {

		//success case : the validator does not return any error
		function fakeValidator(data, callback) {
			if (callback) callback();
		}

		function fakeProxy(data, config, callback) {
			if (callback) callback(null, { statusCode: 201 }, {description : 'here'});
		}

		form.__set__({
			'validator' : fakeValidator,
			'proxy' : fakeProxy
		});

		form(data, config, function(err, outcome) {
			assert.equal(outcome.code, 201);
			assert.equal(outcome.body.description, 'here');
			done();
		});

	});

	it('should return errors when the validation fails', function(done) {

		//failing case : the validator should return errors
		var errors = [{"property" : "name"}];
		function fakeValidator(data, callback) {
			if (callback) callback(null, errors);
		}

		form.__set__('validator', fakeValidator);

		form(data, config, function(err, outcome) {
			assert.equal(outcome.code, 400);
			assert.equal(outcome.body.status, "failed");
			assert.equal(outcome.body.errors, errors);
			done();
		});

	});

});